package com.redgrapefruit.openmodinstaller.launcher

import com.mcgoodtime.gjmlc.core.JavaArgumentHack
import com.redgrapefruit.openmodinstaller.data.ManifestReleaseType
import com.redgrapefruit.openmodinstaller.util.plusAssign
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import org.apache.commons.lang3.SystemUtils
import java.io.FileInputStream

private const val LAUNCHER_BRAND = "OpenLauncher"

/**
 * Manages Minecraft process execution arguments
 */
object ArgumentManager {
    /**
     * Generates launch arguments using the legacy format
     */
    internal fun generateLegacyArguments(
        /**
         * Raw string from the format
         */
        raw: String,
        /**
         * Root game directory
         */
        root: String,
        /**
         * Launched Minecraft version
         */
        version: String,
        /**
         * The version of the asset index
         */
        assetsIndexName: String,
        /**
         * Authentication UUID generated by Yggdrasil
         */
        authUuid: String,
        /**
         * Authentication (client)access token generated by Yggdrasil
         */
        authAccessToken: String,
        /**
         * Maximum process memory in megabytes
         */
        maxMemory: Int,
        /**
         * Additional JVM arguments
         */
        jvmArgs: String): String {

        // The legacy format acts as a template, and all we have to do here is replace the placeholders with actual values
        return raw
            .replace(JavaArgumentHack.VERSION_NAME, version)
            .replace(JavaArgumentHack.GAME_DIRECTORY, root)
            .replace(JavaArgumentHack.ASSETS_ROOT, "$root/assets")
            .replace(JavaArgumentHack.ASSETS_INDEX_NAME, assetsIndexName)
            .replace(JavaArgumentHack.AUTH_UUID, authUuid)
            .replace(JavaArgumentHack.AUTH_ACCESS_TOKEN, authAccessToken)
            .replace(JavaArgumentHack.USER_PROPERTIES, "{}")
            .replace(JavaArgumentHack.USER_TYPE, "mojang")
            .mcFillCustomArguments(maxMemory, jvmArgs, root, version)
    }

    /**
     * Generates launch arguments using the modern format
     */
    internal fun generateModernArguments(
        /**
         * The launched Minecraft version
         */
        version: String,
        /**
         * The root game directory
         */
        root: String,
        /**
         * The version of the asset index
         */
        assetsIndexName: String,
        /**
         * The username of the player
         */
        username: String,
        /**
         * The authentication UUID generated by Yggdrasil
         */
        authUuid: String,
        /**
         * The authentication (client)access token generated by Yggdrasil
         */
        authAccessToken: String,
        /**
         * The launched version type.
         *
         * Corresponds to the string values of the [ManifestReleaseType] enum
         */
        versionType: String = "release",
        /**
         * Maximum process heap memory
         */
        maxMemory: Int,
        /**
         * Additional JVM arguments
         */
        jvmArgs: String): String {

        val builder = StringBuilder()

        // Common arguments
        builder += " --username $username"
        builder += " --version $version"
        builder += " --gameDir $root"
        builder += " --assetsDir $root/assets"
        builder += " --assetIndex $assetsIndexName"
        builder += " --uuid $authUuid"
        builder += " --accessToken $authAccessToken"
        builder += " --userType mojang"
        builder += " --versionType $versionType"

        // JVM arguments (some OS-specific)
        if (SystemUtils.IS_OS_MAC_OSX) {
            builder += " -XstartOnFirstThread"
        }
        if (SystemUtils.IS_OS_WINDOWS_10) {
            builder += " -Dos.name=Windows 10"
            builder += " -Dos.version=10.0"
        }
        if (SystemUtils.OS_ARCH == "x86") {
            builder += " -Xss1M"
        }
        builder += " -Djava.library.path=$root/versions/$version/$version-Natives/"
        builder += " -Dminecraft.launcher.brand=$LAUNCHER_BRAND"

        return builder.toString().mcFillCustomArguments(maxMemory, jvmArgs, root, version)
    }

    /**
     * Fills more custom arguments added by the launcher
     */
    private fun String.mcFillCustomArguments(
        /**
         * Maximum process heap memory
         */
        maxMemory: Int,
        /**
         * Additional JVM arguments
         */
        jvmArgs: String,
        /**
         * Root game directory
         */
        root: String,
        /**
         * Launched Minecraft version
         */
        version: String): String {

        // Load version info
        val versionInfoObject: JsonObject
        FileInputStream("$root/versions/$version/$version.json").use { stream ->
            versionInfoObject = Json.decodeFromString(JsonObject.serializer(), stream.readBytes().decodeToString())
        }

        // Fill custom parameters
        val builder = StringBuilder(this)

        builder += " -Xmx${maxMemory}M"
        builder += " $jvmArgs"

        // Fill classpath with the main JAR and all libraries' JARs
        builder += " -cp ${LibraryManager.getLibrariesFormatted(root, versionInfoObject)}"

        return builder.toString()
    }
}
